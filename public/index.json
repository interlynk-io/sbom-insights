[{"content":"\nHey SBOM enthusiasts üëã\nAn SBOM isn‚Äôt just a list of components anymore ‚Äî it has detailed information of your software, which contains hundreds of components. And that\u0026rsquo;s what gives you the transparency of each and every component: such as, who authored it, who supplies it, under what license it‚Äôs released, and even what known vulnerabilities it carries. In other words, it‚Äôs not just an inventory ‚Äî it‚Äôs visibility into the very DNA of your software.\nNow, if SBOMs provides this transparency, the next obvious question is: how do we use that transparency in practice? The answer usually ties back to some common needs:\nMeeting compliance requirements, Identifying and Managing existing vulnerabilities, Ensuring license compliance, Mitigate supply chain risks In this blog, we‚Äôll dig into one specific use case ‚Äî mitigating supply chain risks with policies. This is exactly where SBOM policies come into play. Think of them as guardrails: the SBOM shows you all the data, but policies decide how to act on it. And when you‚Äôre dealing with hundreds or even thousands of components, manually checking each one isn‚Äôt realistic. That‚Äôs why you need clear rules that spell out what‚Äôs acceptable and what‚Äôs not.\nFor example:\nCan we ship a GPL-licensed library inside a commercial product? What if a component shows up without a license or supplier or author value ? Should we block the build if one dependency has a known vulnerability? Do we allow outdated libraries, or should they be banned completely? These aren‚Äôt ‚Äúnice to have‚Äù questions. They‚Äôre the real, everyday decisions organizations need to make if they want to ship software responsibly. SBOM policies transform a raw list of components into something actionable ‚Äî a living framework that enforces compliance, improves security, and builds trust.\nIn short:\nSBOMs show you the data, but policies decide what you do with it.\nThat‚Äôs where the real power kicks in ‚Äî when policies turn raw transparency into action.\nLet‚Äôs make this concrete with a few examples:\nLicensing guardrails: Scan the SBOM and block the build if disallowed licenses (like GPL or AGPL) appear. Missing information: If a component doesn‚Äôt declare a license or supplier, that‚Äôs a red flag. Policies can warn you or even fail the pipeline until it‚Äôs fixed. Security checks: A policy might say, ‚ÄúIf a component has a known critical CVE, fail the build.‚Äù That way, vulnerable software never reaches production. Banned components: Outdated or untrusted libraries? A policy makes sure they don‚Äôt sneak back in. Compliance rules: SBOMs can also be checked against standards (like NTIA or BSI) to ensure required fields are always present. And the best part is ? Policies bring consistency. Instead of every team arguing over what‚Äôs acceptable, the organization defines the rules once ‚Äî and they‚Äôre enforced automatically wherever SBOMs are checked.\nThat‚Äôs how policies transform your SBOM from a static list into a decision-making engine.\nEnforcing SBOM Rules with sbomqs sbomqs is an open-source tool for checking the quality and compliance of SBOMs. Recently, it got smarter ‚Äî it now supports policies.\nPolicies in sbomqs is a collection of rules. Instead of you manually scanning an SBOM to decide what‚Äôs acceptable or risky, sbomqs lets you define those rules upfront and then enforces them automatically.\nYou can provide policies in two ways:\nAs a YAML policy file. Inline on the command line The Building Blocks of a Policy Before jumping into examples, let‚Äôs break down the concepts:\nPolicy ‚Üí a collection of rules. Type ‚Üí defines what condition is checked (whitelist, blacklist, or required). Action ‚Üí tell policy what to do if a rule is violated (fail, warn, or pass). So, the flow is simple:\n‚úÖ If the rules are satisfied ‚Üí the check passes ‚Üí pass . ‚ùå If the rules are not satisfied ‚Üí violation‚Üíthe outcome follows the action (fail, warn). Rule Each rule is a list SBOM field/values. A rule have:\nfield ‚Üí the SBOM attribute to check (e.g., license, supplier, version). values ‚Üí the exact values allowed or disallowed. patterns ‚Üí regex patterns for flexible matching. (future support: operator ‚Üí in, not_in, matches, not_matches). The logic is:\nMultiple rules in a policy ‚Üí combined with AND (all must pass). Multiple values/patterns in a rule ‚Üí combined with OR (any match passes). Types of Policies 1. Whitelist Allows only defined values in the list.\nViolation if the value is outside the list.\nExample:\npolicy: - name: approved_licenses type: whitelist rules: - field: license values: [MIT, Apache-2.0, BSD-3-Clause] action: fail ‚úî Components with MIT or Apache-2.0 ‚Üí no violation ‚Üí pass ‚úò Components with GPL-3.0 ‚Üí violation, ‚Üí action ‚Üí fail 2. Blacklist Disallows certain values. Violation if the value matches the list/pattern. Example:\npolicy: - name: banned_components type: blacklist rules: - field: name patterns: [\u0026#34;log4j-1.*\u0026#34;, \u0026#34;commons-collections-3.2.1\u0026#34;] action: fail ‚úî Component okio-1.6.0 ‚Üí no violation ‚Üí pass ‚úò Component log4j-1.2.17 ‚Üí violation ‚Üí fail 3. Required Ensures certain fields are always present. Violation if a required field is missing. policy: - name: required_metadata type: required rules: - field: supplier - field: version - field: license action: fail ‚úî Component with supplier, version, and license ‚Üí no violation ‚Üí pass. ‚úò Component missing supplier ‚Üí violation ‚Üí fail. Action Finally, the action decides how policy responds when a violation happens:\nfail ‚Üí mark as failed, exit with non-zero code (block CI/CD pipeline). warn ‚Üí report the violation but continue (exit code zero). pass ‚Üí force pass even with violations (useful for dry-runs). üëâ With this structure, sbomqs policies let you move from just seeing risks in your SBOM to actually enforcing rules around them ‚Äî whether that‚Äôs blocking GPL licenses, ensuring metadata completeness, or banning unsafe libraries.\nHands-on Demo Running sbomqs with Policies This policy below, named approved_licenses, is of type whitelist. It means only the licenses listed here (MIT, Apache-2.0) are considered acceptable. If a component has any other license, it violates the policy, and since the action is set to fail, the overall result will fail.\npolicy: - name: approved_licenses type: whitelist rules: - field: license values: [MIT, Apache-2.0] action: fail We will run this policy against incomplete which has license value as \u0026ldquo;NOASSERTION\u0026rdquo; or \u0026ldquo;NONE\u0026rdquo;. So, obviously it should violate the policy, therefore, it should fail as per the policy action.\nsbomqs policy -f samples/policy/whitelist/approved-licenses.yaml samples/policy/in-complete.spdx.sbom.json The output shows that the policy check failed. Here‚Äôs why:\nThe SBOM has 6 components in total. The policy applied 1 rule (license whitelist). All 6 components violated that rule, resulting in 6 violations. Since the policy action is set to fail, the final outcome is marked as fail. Now, will run the same command against complete SBOM, which contain license with either of the listed licenses:\nsbomqs policy -f samples/policy/whitelist/approved-licenses.yaml samples/policy/complete-sbom.spdx.json The output shows that the policy check failed. Here‚Äôs why:\nThe SBOM contains 5 components in total. The policy applied 1 rule (license whitelist). All 5 components had licenses within the approved list (MIT or Apache-2.0), so there were 0 violations. Since no violations were found, the final outcome is marked as pass. For more policies you can refer here: https://github.com/interlynk-io/sbomqs/tree/main/samples/policy\nApplying Inline Policies (CLI) You don‚Äôt always need a YAML file to define policies. With sbomqs, you can also write them inline, directly in the CLI. Let‚Äôs take the same approved_licenses whitelist policy from before and express it inline.\nExample ‚Üí Whitelisting licenses (MIT, Apache-2.0) directly in the CLI\nsbomqs policy \\ --name approved_licenses \\ --type whitelist \\ --rules \u0026#34;field=license,values=MIT,Apache-2.0\u0026#34; \\ --action fail \\ samples/policy/in-complete.spdx.sbom.json The outcome shows that the SBOM had 6 components, and all 6 failed the whitelist rule (none matched MIT or Apache-2.0). Since the action was set to fail, the final result is also fail.\nApplying multi-policies using YAML In the real world, you rarely stop at just one rule/policy. You want to check for multiple things at the same time ‚Äî like whether licenses are approved, whether certain components are banned, and whether all the required metadata fields are present.\nThat‚Äôs exactly why sbomqs supports running multiple policies from a single YAML file. Here‚Äôs an example policy.yaml with three different checks:\npolicy: - name: approved_licenses type: whitelist rules: - field: license values: - MIT - Apache-2.0 - BSD-3-Clause action: warn # or \u0026#39;fail\u0026#39; - name: banned_components type: blacklist rules: - field: name patterns: - \u0026#34;log4j*\u0026#34; - \u0026#34;commons-collections-3.2.1\u0026#34; action: fail - name: required_metadata type: required rules: - field: supplier - field: version - field: license - field: checksum action: fail Now, let‚Äôs run it:\nsbomqs policy -f samples/policy/custom/custom-policies.yaml samples/policy/in-complete.spdx.sbom.json Breaking it down:\napproved_licenses (whitelist) ‚Üí All 6 components failed to match the approved licenses (MIT, Apache-2.0, BSD-3-Clause). Since the action is set to warn, the policy result is warn, not fail. banned_components (blacklist) ‚Üí 1 of the 6 components matched a banned pattern (log4j* or commons-collections-3.2.1). Because the action is set to fail, this caused the policy to fail. required_metadata (required) ‚Üí All components had the required fields (supplier, version, license, checksum), so this policy passed with no violations. And the total rules applied to it are 4 in total. Basically the components has values such as \u0026ldquo;NOASSERTION\u0026rdquo; or \u0026ldquo;NONE\u0026rdquo;, but not empty or nil. Wrapping It Up At its core, an SBOM gives you transparency ‚Äî a clear view of every piece that makes up your software. But transparency on its own isn‚Äôt enough. Without rules, it‚Äôs just data sitting in a file.\nThat‚Äôs why policies matter. They turn your SBOM into something actionable: guardrails that decide what‚Äôs acceptable, what‚Äôs risky, and what simply can‚Äôt be shipped. From blocking vulnerable components to banning unwanted licenses, policies make sure your software supply chain stays secure, compliant, and trustworthy.\nSo the next time you look at an SBOM, don‚Äôt just see a list of components. See it as the foundation for decisions. And with the right policies in place, those decisions become consistent, automated, and reliable ‚Äî helping you ship software that others can truly trust.\nFeel free to raise an issue if you have any other use-cases or anything else. If you love this project show your love by starring ‚≠ê the sbomqs repository!\nResources sbomqs repo: https://github.com/interlynk-io/sbomqs/ sbomqs policies and sboms: https://github.com/interlynk-io/sbomqs/tree/main/samples/policy sbomqs policy documentation: https://github.com/interlynk-io/sbomqs/blob/main/docs/policy.md ","permalink":"http://localhost:1313/posts/sbomqs-and-sbom-policies-turning-transparency-into-action/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-25.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey SBOM enthusiasts üëã\u003c/p\u003e\n\u003cp\u003eAn SBOM isn‚Äôt just a list of components anymore ‚Äî it has detailed information of your software, which contains hundreds of components. And that\u0026rsquo;s what gives you the transparency of each and every component: such as, who authored it, who supplies it, under what license it‚Äôs released, and even what known vulnerabilities it carries. In other words, it‚Äôs not just an inventory ‚Äî it‚Äôs visibility into the very DNA of your software.\u003c/p\u003e","title":"Sbomqs and Sbom Policies: Turning Transparency Into Action"},{"content":"\nHey SBOM enthusiasts üëã,\nThese are common challenges faced by all SBOM authors. How can fields such as \u0026ldquo;NOASSERTION\u0026rdquo;, \u0026ldquo;NONE\u0026rdquo; be filled at a scale ? This issue is widespread because SBOM generation tools often have gaps and limitation. I do not blame any tool for this; it is beyond their capability, as these tools are primarily design to capture the dependencies of a software. SBOM generation depends on various factors, such as the programming language, the package manager used, the type of SBOM build( source build, build time or post build) and the information provided by the software author on their site.\nLet\u0026rsquo;s quickly remember why we create SBOMs.\nAn SBOM is meant to provides transparency across your all software dependencies. More broadly, it brings visibility to the entire software supply chain\u0026hellip;\nHowever, that visibility or transparency is directly proportional to the quality and completeness of the SBOM data. In short, visibility is directly proportional to SBOM quality.\nWhat does SBOM quality mean ? It means that SBOM data to be accurate, complete and trustworthy . In other words, the information provided in the SBOM should be correct and comprehensive. For example, an SBOM should capture all the components present in the software, which determines the completeness.\nIf an SBOM is missing critical fields or contains incorrect or inaccurate values, the visibility and transparency it provides would become diminished or distorted. As a result, vendors may loose trust in it, SBOM platforms might produce flawed analysis, and ultimately, you‚Äôre left with a report that feels more like guesswork than truth.\nThat‚Äôs why,\nPost-processing of SBOM is so important.\nTo make an SBOM truly valuable and high quality, it needs to undergo process beyond intial generation. This is where augmentation and enrichment comes in; these are the steps that fills the gaps and correct missing details after the SBOM is created.\nTake a real world example. Imagine your project has hundreds of components, and a few lack license information. What do you do? You could spend hours manually tracking down the license for each one ‚Äî but that‚Äôs not scalable, especially with modern automation. So, the question arises, How do you fill those fields ?\nThe solution is augmentation and enrichment. Augmentation involves adding crucial information to the SBOM document and it\u0026rsquo;s components provided by the SBOM authors or other trusted sources such as ecosystm.ms, ClearlyDefined, etc. Some of the critical fields are license, copyright, download location, author, purl ID, etc. Whereas Enrichment refers to the process of adding additional values, from package manages, and external datasets, expanding beyond what‚Äôs provided during initial creation.\nOkay, now we know what needs to be done to fill the gaps after SBOM generation. And then the next question comes up: Who provides the values of these missing fields, and how can those values be trusted ?\nThe answer lies in centralized, community-driven open source datasets. Projects like ClearlyDefined collect and curate license, copyright, download location and metadata information for thousands of open-source components. Instead of manually searching each component, enrichment tools can automatically pull data from these trusted sources and fill in the gaps. This is exactly what Interlynk augmentation tool is addressing in it\u0026rsquo;s new features or latest release.\nsbomasm is the augmentation tool from Interlynk. So far, it has helped SBOM authors and to add critical values or corrected exiting information and remove invalid data. These are done only when SBOM author is totally aware of the provided values. But with many missing values or unknown values especially critical fields at scale, then it becomes necessary to use the centralized database to efficiently enrich important fields details in bulk. Now, sbomasm is coming up with new feature to automatically enrich SBOMs using community data source.\nsbomasm enrichment While mainy tools aims to enrich SBOMs with every possible piece of metadata, but here sbomasm takes a different approach. It\u0026rsquo;s focus is to enrich only the important fields ‚Äî such as license information. In future, sbomasm will support enrichment of other fields like copyright, download location, etc ‚Äî whereever reliable, centralized datasets exists.\nCurrently sbomasm supports license enrichment only. By default, it enriches only those components that have missing license fields. If you want to overwrite and refresh license information for all components, you can use the \u0026ndash;force flag.\nLet\u0026rsquo;s quickly proceed with hands-on:\nEnrich the SBOM with license value for missing elements only: sbomasm enrich --fields=\u0026#34;license\u0026#34; sbom.cdx.json -o enriched-sbom.cdx.json Here is the o/p:\nFetching Components Response... 1562 / 1562 [--------------------------------------] 100.00% 37 p/s Enriching SBOM... 1546 / 1562 [--------------------------------------\u0026gt;_] 98.98% ? p/s Total: 1750, Selected: 1562, Enriched: 1546, Skipped: 16, Failed: 0 The o/p says,\nTotal ‚Üí total number of components in the SBOM(1750) Selected ‚Üí components with missing licenses(1562) Enriched ‚Üí components whose license was successfully added (1546) Skipped ‚Üí components whose license couldn\u0026rsquo;t be added (16 ) Failed ‚Üí components failed to enriched (0) Those 16 components were skipped ? Usually because ClearlyDefined did not have license data for them, or even if license data exist, it might have non-standard(e.g., \u0026lsquo;NOASSERTION\u0026rsquo; or \u0026lsquo;OTHERS\u0026rsquo; licenses), or because the component lacked PURL information.\nOne thing to note: enrichment can take a bit of time, and that is purely intentional. By default, sbomasm process 100 components at a time to avoid overloading ClearlyDefined\u0026rsquo;s servers with large payloads. You can adjust these numbers using \u0026ndash;chunk-size flag to increase or decrease how many components are processed in each batch.\nsbomasm enrich --fields=\u0026#34;license\u0026#34; sbom.cdx.json -o enriched-sbom.cdx.json --chunk-size 500 Using a chunk size of 100(by default) took 15 seconds, while increasing it to 500 chunk size, reduced the it down to 6 second, and even increasing further to chunk size 1000, reduced it to 2 second.\nFor more examples, you can refer here.\nWrapping it With this new update, sbomasm now goes beyond just augmentation. It not only lets you add an extra author, correct inaccurate values, or remove unwanted fields ‚Äî but also enriches your SBOM with missing licenses at scale.\nIn short, sbomasm empowers SBOM authors to take full control:\nEdit fields when you already know the right values, and\nEnrich fields when you don‚Äôt, by pulling trusted data from centralized, community-driven datasets like ClearlyDefined.\nThis balance of author-driven edits and dataset-driven enrichment means your SBOMs can finally be both accurate and complete ‚Äî without manual busywork.\nLet us know what other important field to be enriched next by filing an issue.\nIf you loved this project, show the love back by starring ‚≠ê this repo.\nThanks to all the maintainer and contributors of ClearlyDefined projects for making this centralized-community datasets intiative, Github Repo.\nResources sbomasm: https://github.com/interlynk-io/sbomasm ClearlyDefined: https://clearlydefined.io/ ","permalink":"http://localhost:1313/posts/sbomasm-enriches-licenses-using-clearlydefined-datasets/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-24.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey SBOM enthusiasts üëã,\u003c/p\u003e\n\u003cp\u003eThese are common challenges faced by all SBOM authors. How can  fields such as \u0026ldquo;NOASSERTION\u0026rdquo;, \u0026ldquo;NONE\u0026rdquo; be filled at a scale ? This issue is widespread because SBOM generation tools often have gaps and limitation. I do not blame any tool for this; it is  beyond their capability, as these tools are primarily design to capture the dependencies of a software. SBOM generation depends on various factors, such as the programming language, the package manager used, the type of SBOM build( source build, build time or post build)  and the information provided by the software author on their site.\u003c/p\u003e","title":"Sbomasm Enriches Licenses Using Clearlydefined Datasets"},{"content":"\nHey SBOM enthusiasts üëã,\nwe all know by now ‚Äî SBOMs aren‚Äôt optional anymore. They‚Äôve become a standard part of the software supply chain, and there‚Äôs a lot you can do with them: augmenting, enriching, editing, validating‚Ä¶ the list keeps growing.\nBut here‚Äôs the thing ‚Äî while adding and improving data in SBOMs gets most of the attention, sometimes the real power comes from removing what you don‚Äôt need. Maybe it‚Äôs for privacy, maybe for cleanup, maybe to keep your SBOM lean before sharing it.\nWhen working with SBOMs, ‚Äúremoval‚Äù could mean:\nRemoval of single field from the document metadata Removal of single field from specific component Removal of same field from all components Or even removal of entire component (plus its dependencies) That‚Äôs where sbomasm‚Äôs new removal features come in.\nExample: maybe you want to remove every field with value \u0026ldquo;NOASSERTION\u0026rdquo;. Or hide a license before sending the SBOM to a partner. Or drop a hash that could expose internal build details.\nUntil now, sbomasm allows to edit SBOM common fields. In addition to that, it will now supports removing them ‚Äî in both SPDX and CycloneDX formats ‚Äî without making you wrestle with each format‚Äôs schema.\nWhy we choosen Common Field over Schema Field ? We initially considered two approaches for field removal:\nSchema Based Removal ‚Äì where users need to specify exact schema paths (e.g., CreationInfo-\u0026gt;Creator-\u0026gt;Person for SPDX) for each field, which differ b/w SPDX and CycloneDX. Common Fields-Based Removal ‚Äì you just the field name (like license, author, purl), which are too common among SBOM, and sbomasm handles the schema differences The sbomasm remove(rm) command The new remove command supports two types of removal:\nField Removal ‚Äì Take out specific fields, either from the SBOM‚Äôs document metadata or from individual components metadata. Example: remove license from a single component, or strip author from the document, or remove license having value \u0026ldquo;Apache-2.0\u0026rdquo; field from all components. Component Removal ‚Äì Remove one or more components entirely, along with their linked dependencies and files. Both work for SPDX and CycloneDX ‚Äî and both keep your SBOM valid.\nLet\u0026rsquo;s discuss them one by one.\nField Removal in sbomasm Under this, following scenarios are possible. For say, one can remove:\nFrom the document itself: fields like author, supplier, timestamp From a specific component: fields like license, hash, purl, description, repo, supplier, cpe From all components: same as above, but applied across the SBOM. 1.1 Remove field from document using key(field) Examples:\nRemove field \u0026ldquo;author\u0026rdquo; from document section sbomasm rm --field author --scope document sbom.json -o new-sbom.json 1.2 Remove field from document using key and value Example:\nRemove field \u0026ldquo;author\u0026rdquo; having value \u0026ldquo;Interlynk\u0026rdquo; from document section sbomasm rm --field author --value \u0026#34;Interlynk\u0026#34; --scope document sbom.json -o new-sbom.json 2.1 Remove field from specific component using key Example:\nRemove field \u0026ldquo;license\u0026rdquo; from a specific component having name \u0026ldquo;nginx\u0026rdquo; and version \u0026ldquo;v1.21.0\u0026rdquo; sbomasm rm --field license --scope component --name \u0026#34;nginx\u0026#34; --version \u0026#34;v1.21.0\u0026#34; sbom.json -o new-sbom.json 2.2 Remove field from specific component using key and value Example:\nRemove \u0026ldquo;purl\u0026rdquo; field with value \u0026ldquo;pkg:golang/github.com/fluxcd/pkg/oci@v0.45.0\u0026rdquo; from a specific component having name \u0026ldquo;github.com/fluxcd/pkg/oci\u0026rdquo; and version \u0026ldquo;v0.45.0\u0026rdquo;. sbomasm rm --field purl --value \u0026#34;pkg:golang/github.com/fluxcd/pkg/oci@v0.45.0\u0026#34; --scope component --name \u0026#34;github.com/fluxcd/pkg/oci\u0026#34; --version \u0026#34;v0.45.0\u0026#34; sbom.json -o new-sbom.json 3.1 Remove field from all component using key Example:\nRemove \u0026ldquo;supplier\u0026rdquo; field from all components sbomasm rm --field supplier --scope component -a sbom.json -o new-sbom.json where, all components is signifies via \u0026#34;-a\u0026#34;. 3.2 Remove field from all component using key and value Example:\nRemove \u0026ldquo;license\u0026rdquo; field from all components if it\u0026rsquo;s value is \u0026ldquo;Apache-2.0\u0026rdquo; sbomasm rm --field license --value \u0026#34;Apache-2.0\u0026#34; --scope component -a sbom.json -o new-sbom.json NOTE:\nSupport fields for document are: author, supplier, tool, lifecycle, license, description, repository, timestamp Similarly, supported fields for component are: copyright, cpe, description, hash, license, purl, repo, supplier, type Component Removal in sbomasm Sometimes, a component just shouldn‚Äôt be in the SBOM at all ‚Äî maybe it‚Äôs internal, maybe it‚Äôs irrelevant to the version you‚Äôre sharing. Component removal lets you delete:\nRemove a single component by name, version, or PURL Remove multiple components by matching a field and value Remove all related dependencies and files automatically 1. Remove specific component Example:\nRemove a entire component with a name \u0026ldquo;nginx\u0026rdquo; and version \u0026ldquo;v2.0.5\u0026rdquo;. And by default it will also remove all it\u0026rsquo;s dependencies and files. sbomasm rm --components --name nginx --version \u0026#34;v2.0.5\u0026#34; NOTE:\nThe key difference in flags between \u0026ldquo;field removal\u0026rdquo; and \u0026ldquo;component removal\u0026rdquo; is the singular vs. plural form: \u0026ndash;component vs \u0026ndash;components\nIn field removal, the default action targets a single component, so the flag is \u0026ldquo;\u0026ndash;component\u0026rdquo;. To apply changes to all components, you add the \u0026ldquo;-a\u0026rdquo; flag. In component removal, the default action targets all components, so the flag is \u0026ldquo;\u0026ndash;components\u0026rdquo;. Here to deal with particular component, provide name and version 2. Remove all Components using Field Example:\nRemove all components if it has field \u0026ldquo;author\u0026rdquo; sbomasm rm --components --field author sbom.json -o new-sbom.json Remove all components if it has field \u0026ldquo;license\u0026rdquo; sbomasm rm --components --field license sbom.json -o new-sbom.json 3. Remove all Components using Field And Value Example:\nRemove all components(and it\u0026rsquo;s related dependencies) having a field \u0026ldquo;PURL\u0026rdquo; and it\u0026rsquo;s value \u0026ldquo;pkg:golang/org/xyz/abc@v1.0.0\u0026rdquo;.\nsbomasm rm --components --field purl --value \u0026#34;pkg:golang/org/xyz/abc@v1.0.0\u0026#34; sbom.json -o new-sbom.json This finds all components with that PURL and removes them with their dependencies.\nRemove all components and it\u0026rsquo;s related dependencies having a field \u0026ldquo;license\u0026rdquo; and value \u0026ldquo;Apache-2.0\u0026rdquo;. sbomasm rm --components --field license --value \u0026#34;Apache-2.0\u0026#34; sbom.json -o new-sbom.json Remove all components(and it\u0026rsquo;s related dependencies) having a \u0026ldquo;type\u0026rdquo; and value \u0026ldquo;library\u0026rdquo;. sbomasm rm --components --field type --value \u0026#34;library\u0026#34; sbom.json -o new-sbom.json So, these were sorts of examples on both \u0026ldquo;field removal\u0026rdquo; as well as \u0026ldquo;component removal\u0026rdquo;. For more example refer doc. If yours use-case is similar or even different or any issues or features related to it, simply file up an issue here. We would love to help.\nConclusion Whether it‚Äôs trimming sensitive details, cleaning up unused metadata, or removing entire components that don‚Äôt belong, sbomasm now gives you precise control over what stays in your SBOM ‚Äî and what doesn‚Äôt.\nThe reality is, SBOMs aren‚Äôt just static files you generate once and forget about. They‚Äôre living artifacts that evolve with your software, and sometimes evolution means subtraction.\nBy supporting both SPDX and CycloneDX with a common field approach, sbomasm removes the guesswork (and schema headaches) so you can focus on what matters: delivering accurate, shareable, and compliance-ready SBOMs without manual cleanup marathons.\nTry out sbomasm here: https://github.com/interlynk-io/sbomasm\nIf you loved this project, show the love back by starring ‚≠ê this repo.\n","permalink":"http://localhost:1313/posts/lean-clean-and-compliance-ready-sbomasm-new-removal-capabilities/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-23.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey SBOM enthusiasts üëã,\u003c/p\u003e\n\u003cp\u003ewe all know by now ‚Äî SBOMs aren‚Äôt optional anymore. They‚Äôve become a standard part of the software supply chain, and there‚Äôs a lot you can do with them: augmenting, enriching, editing, validating‚Ä¶ the list keeps growing.\u003c/p\u003e\n\u003cp\u003eBut here‚Äôs the thing ‚Äî while adding and improving data in SBOMs gets most of the attention, sometimes the real power comes from removing what you don‚Äôt need. Maybe it‚Äôs for privacy, maybe for cleanup, maybe to keep your SBOM lean before sharing it.\u003c/p\u003e","title":"Lean, Clean, and Compliance Ready: Sbomasm's New Removal Capabilities"},{"content":"\nHey SBOM community,\nLove to see you back here learning something new. If you‚Äôre working with SBOMs, you probably know that generating SBOM is just a first step. What you get after generating SBOM is just a raw SBOM ? And the raw SBOM is incomplete, inaccurate sometime and most importantly not even comply with NTIA minimum element according to this research whitepaper.\nAnd that\u0026rsquo;s exactly where your involvement comes to enrich the SBOM, augument the SBOM, etc to make a better quality SBOM with completeness, accuracy and enriched data. At the end the real power of SBOM lies within itself i.e data. Because at the end these SBOM will be feeded to SBOM platform which perform complete analysis of the SBOM. The more complete and correct the data is, the more it helps you understand and reduce risk in your software supply chain.\nTo unleash the power of SBOMs, it needs to go through process like augmentation, enrichment, etc ‚Äî adding missing fields, improving accuracy, aligning with compliance frameworks. And to check if your SBOM has made some improvements towards better quality, you want to check its quality, and for that there\u0026rsquo;s a tool: sbomqs.\nsbomqs is a lightweight open source CLI tool that helps you measure the quality and compliance of SBOMs. To know more about refer to the repo.\nUntil now, sbomqs offered detailed compliance checks for NTIA, FSCT, OCT, BSI, and others. Alongside that, the score command provided a summarized scorecard, giving you a quick look at your SBOM‚Äôs health across categories like:\nNTIA compliance Structural completeness Data quality Semantic clarity Sharing readiness This made it easier to get a fast, visual understanding of where your SBOM stands without digging deep into every field.\nBefore we get into the new additions, let‚Äôs look at how a summarized score for NTIA looks like.\nThe score output gives you a clear table showing which key fields from the NTIA guidelines are present across your SBOM. For example, component_with_name checks whether each listed component includes a name. If all components are named, you‚Äôll see a 100% score for that field. Other fields, like comp_with_version, comp_with_uniq_ids, and comp_with_supplier, follow the same idea‚Äîscanning for completeness based on NTIA expectations.\nThis format gives you quick visibility into which areas of your SBOM are solid, and where details might be missing.\nTo give you a better sense of how this looks, here‚Äôs what the table output means:\nThe CATEGORY column tells you which standard the check belongs to (like NTIA or BSI). The FEATURE column lists the specific field or property being evaluated‚Äîfor example, whether each component has a name, version, or checksum. The SCORE column shows how well your SBOM did for that field, with a perfect score being 10.0. Partial scores mean only some components passed that check. The DESC column provides context‚Äîlike \u0026ldquo;37/38 have versions\u0026rdquo; or \u0026ldquo;0/38 have supplier names.\u0026rdquo; This helps pinpoint exactly where the SBOM is falling short. This kind of breakdown makes it easy to interpret your SBOM\u0026rsquo;s quality at a glance.\nWhat‚Äôs New: Scoring Support for BSI 1.1 and BSI 2.0 We‚Äôve now expanded the score command to include BSI-v1.1 and BSI-v2.0 compliance scoring. That means you can now you can get a score and summary of your SBOM against compliances like bsi-v1.1, bsi-v2.0, etc.\nLet\u0026rsquo;s quickly see a summarized score against BSI-v1.1:\nSimilarly scoring for BSI-v2.0:\nAs compare to NTIA, bsi has more number of features to check. Now, once you get a summary of this score. Along with score you get to know how many number of components missing what features and how many have. This helps you better understanding of you SBOM overall. Now accordingly, you can update your SBOM with adding more values to it.\nAfter identifying the overall gaps, you might want to dig deeper and see exactly which components are missing which fields. This helps you decide what needs to be added or enriched to improve the quality of your SBOM. To support this, sbomqs provides a list command that breaks it down component by component.\nsbomqs list command Let\u0026rsquo;s quickly look at the command and it\u0026rsquo;s o/p and see how many components have feature, comp_with_name.\nIf you see the o/p, it shows that 38/38 components contains component name. Now let\u0026rsquo;s see the value of each feature that components have. To do so, add a \u0026ndash;show flag in the list command:\nBy default, the list command shows which all components has a particular feature. To flip the view and see which components are missing it, just add the --missing flag.\nFor example, if all components already have a name, the output will confirm that none are missing the comp_with_name field. Simple and direct.\nSimilarly, let see how many component is missing the feature comp_with_suppplier.\nSo, all components are missing this feature. Now, you can enrich the values accordingly. You can use tools like sbomasm and parlay tool for augmentation and enrichment respectively.\nSo, that\u0026rsquo;s how you can summarized SBOM scoring against BSI and NTIA and know exactly what your SBOM has. And to get the detailed analysis of each components against your compliances using sbomqs compliance command for the same. And then as per the gaps in your SBOMs, you can take further steps to enhance your SBOMs.\nIf you love the sbomqs tool, pour your love by ‚≠ê starring the repository.\nThat\u0026rsquo;s all for today. Keep learning and keep growing\u0026hellip;\nBefore signing off, if you like to see the complete analysis of your SBOM, try our community version of Interlynk Platform. Visit official site interlynk.io and sign up.\nExternal Resources sbomqs github repository sbomqs compliance readme NTIA Minimum elements compliance BSI-v1.1 compliance BSI-v2.0 compliance sbomasm and parlay github repo Interlynk community-tier ","permalink":"http://localhost:1313/posts/sbomqs-scoring-support-for-bsi-1.1-and-bsi-2.0-in-a-summarized-way/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-15.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey SBOM community,\u003c/p\u003e\n\u003cp\u003eLove to see you back here learning something new. If you‚Äôre working with SBOMs, you probably know that generating SBOM is just a first step. What you get after generating SBOM is just a raw SBOM ? And the raw SBOM is incomplete, inaccurate sometime and most importantly not even comply with NTIA minimum element according to this research \u003ca href=\"https://github.com/SBOM-Community/SBOM-Generation/blob/main/whitepaper/Draft-SBOM-Generation-White-Paper-Feb-25-2025.pdf\"\u003ewhitepaper\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd that\u0026rsquo;s exactly where your involvement comes to enrich the SBOM, augument the SBOM, etc to make a better quality SBOM with completeness, accuracy and enriched data.  At the end the real power of SBOM lies within itself i.e data. Because at the end these SBOM will be feeded to SBOM platform which perform complete analysis of the SBOM. The more complete and correct the data is, the more it helps you understand and reduce risk in your software supply chain.\u003c/p\u003e","title":"Sbomqs Scoring Support for Bsi 1.1 and Bsi 2.0 in a Summarized Way"},{"content":"\nGitHub Release Monitoring: SBOM Automation for External Repos üöÄ\nIf you‚Äôve been following our sbommv blog series, welcome to the fourth one‚Äîeach post tackling a new challenge around SBOM automation. Here‚Äôs a quick recap of what we‚Äôve covered so far:\nGitHub Release Transfers: How to fetch SBOMs from GitHub release pages and move them to systems like folders, Dependency-Track, Interlynk, or AWS S3. Folder Monitoring: Running sbommv in daemon mode to continuously watch a local folder and upload new SBOMs as they appear. AWS S3 Integration: Adding S3 as both an input and output adapter, enabling SBOM flows to and from S3 buckets. In short, sbommv is a tool built for automation‚Äîdesigned to seamlessly move SBOMs across systems, with support for format conversion, metadata enrichment, and monitoring workflows like folders.\nNow, we‚Äôre stepping into a real-world DevSecOps problem: keeping up with SBOMs for external open-source dependencies hosted on GitHub.\nMoving one step ahead to deal with real problem,\nThe Problem: Watching External Repos for SBOM Updates As a platform or security engineer, you likely rely on external open-source components like sigstore/cosign, interlynk-io/sbomqs, etc. It\u0026rsquo;s important for an company or organization to keep eye on Open Source dependencies because \u0026ldquo;According to a survey 70-80% code are from Open Source\u0026rdquo;. When these projects cut a new release, many now publish a digital artifacts along with other artifacts such as binaries, signatures, etc known as SBOMs.\nIdeally, you\u0026rsquo;d want to:\nDetect when external OSS projects cut new releases Fetch their latest SBOMs And transfer it into platforms like SBOM Platforms such as Dependency-Track, Interlynk, or even to your cloud storage AWS S3 storage, or even local folder, etc But here‚Äôs the issue:\nGitHub doesn‚Äôt support webhooks for repositories you don‚Äôt own.\nwhich means, there\u0026rsquo;s no native way to subscribe to releases of external OSS projects.\nThis creates a gap:\nYou want a system that keeps track of releases from key dependencies Automatically fetches new SBOMs when a release drops. Pushes them to your SBOM platform or any other o/p systems. Without relying on manual checks, brittle scripts, or CI workarounds You could try building something yourself with polling and custom logic‚Äîbut that leads to overhead, complexity, maintaining and duplicated effort.\nThat‚Äôs exactly where sbommv GitHub daemon mode comes in.\nUnder the Hood: How sbommv Detects New Releases When sbommv polls a repository in daemon mode, it looks at two key metadata fields from the latest release:\nrelease_id: A unique identifier for the release published_at: The timestamp when the release was published These values are saved in a local cache (./sbommv/cache_dtrack_release.json). On each subsequent poll, sbommv compares the current values against the ones stored in cache:\nIf the release_id and published_id match ‚Üí No new release If either of them is different ‚Üí New release detected This lightweight comparison ensures sbommv only reacts when there‚Äôs actually something new.\nTo avoid edge cases where a release is published but its associated SBOMs are still being uploaded (e.g., via GitHub Actions), sbommv waits for a short, configurable delay‚Äîdefaulting to 3 minutes‚Äîbefore attempting to fetch the SBOM assets.\nThis delay gives GitHub workflows enough time to finish generating and attaching the SBOMs to the release. You can customize delay time according to your workflow and time taken for your assets to released via flag --in-github-asset-wait-delay.\nOnly after confirming a new release‚Äîand giving it time to settle‚Äî sbommv proceed to download, validate, and push the SBOMs to the output system.\nSBOM Fetching Methods Supported SBOM is fetched via GitHub, supports 3 methods:\nAPI Method(default): Fetches the SBOM from GitHub‚Äôs Dependency Graph API Release Method: Pulls SBOMs directly from the release assets. Tool Method: Clones the repo at the release commit and uses a tool (like Syft) to generate a fresh SBOM And after fetching, it uploads the SBOMs to the respective o/p system.\nReal-World Example: Tracking sbomqs for New SBOMs Let‚Äôs say your product uses sbomqs, and you want to keep your internal SBOM platform updated with the latest sbomqs SBOMs.\nBefore running the below command, one thing to keep in mind is that by default poll time is 24hrs, to customize is provide the flag \u0026ndash;in-github-poll-interval:\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --in-github-method=\u0026#34;release\u0026#34; \\ --in-github-poll-interval=60s \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --daemon This command does the following:\nEnters daemon mode Monitors the sbomqs GitHub repo every 60 seconds On detecting a new release, downloads SBOMs from the release page Waits briefly to ensure assets are ready Uploads them to Dependency-Track Updates cache to avoid re-uploading the same version NOTE:\nOn the first run, sbommv will treat any repository as \u0026ldquo;new\u0026rdquo; and will fetch + upload the SBOMs while caching the release metadata for future comparisons.\nSimilarly, you want to keep eye on multiple repos such as sbomqs and sbommv at a time, run below command:\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io\u0026#34; \\ --in-github-include-repos=sbomqs,sbommv --in-github-method=\u0026#34;release\u0026#34; \\ --in-github-poll-interval=60s \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --daemon Why This Matters GitHub is the central hub for modern open-source. But without automation, tracking releases and managing SBOMs quickly becomes a manual, error-prone mess.\nWith GitHub daemon mode, you:\nKeep SBOM platforms in sync with upstream changes Ensure no SBOMs are missed for external dependencies Cut down on manual tracking or brittle custom scripts It‚Äôs automation designed for how real-world software is built and secured.\nResources GitHub Daemon design docs Monitoring GitHub External Repos and uploading to Dependency Track Monitoring GitHub External Repos and uploading to SBOM platform - Interlynk Monitoring GitHub External Repos and downloading to local folder Monitoring GitHub External Repos and uploading to AWS S3 bucket Get Started with sbommv ","permalink":"http://localhost:1313/posts/monitoring-external-github-repos-for-sboms/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-14.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGitHub Release Monitoring: SBOM Automation for External Repos\u003c/strong\u003e üöÄ\u003c/p\u003e\n\u003cp\u003eIf you‚Äôve been following our sbommv blog series, welcome to the fourth one‚Äîeach post tackling a new challenge around SBOM automation. Here‚Äôs a quick recap of what we‚Äôve covered so far:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGitHub Release Transfers\u003c/strong\u003e: How to fetch SBOMs from GitHub release pages and move them to systems like folders, Dependency-Track, Interlynk, or AWS S3.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFolder Monitoring\u003c/strong\u003e: Running sbommv in daemon mode to continuously watch a local folder and upload new SBOMs as they appear.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAWS S3 Integration\u003c/strong\u003e: Adding S3 as both an input and output adapter, enabling SBOM flows to and from S3 buckets.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn short, sbommv is a tool built for automation‚Äîdesigned to seamlessly move SBOMs across systems, with support for format conversion, metadata enrichment, and monitoring workflows like folders.\u003c/p\u003e","title":"Monitoring External Github Repos for Sboms"},{"content":"\nIn our previous posts, we streamlined SBOM workflows by moving them from GitHub releases or local folders directly into platforms like Dependency-Track and then, we took it one step further with folder continuous monitoring‚Äîcontinuous fetching and uploading via sbommv‚Äôs daemon mode, which runs in the background and keeps an eye on target folders for any incoming or modified SBOMs.\nAs we know, sbommv is a modular system that seamlessly integrates multiple input systems like folders, GitHub, and multiple output systems like Dependency-Track, Interlynk, and folders‚Äîallowing SBOMs to move effortlessly from one system to another. Building on that foundation, it\u0026rsquo;s time for another leap forward: Integrating AWS S3 with sbommv.\nIf your SBOMs live on S3, or you want to store them there for compliance, backups, audits, or sharing across environments, sbommv now has you covered. Whether your SBOM source or destination is S3, sbommv makes it seamless.\nLet\u0026rsquo;s dive into how you can:\nFetch SBOMs directly from S3 buckets Upload SBOMs into S3 buckets or SBOM Platforms like Dependency Track, etc Fetch SBOMs directly from local storage or github and push to S3 for storage. Set up dry-run previews Prepare for S3 monitoring (future work) Why S3? üåê S3 is everywhere‚Äîwidely used by dev teams, security engineers, and compliance officers. SBOMs generated during CI/CD workflows are often stored in S3 buckets, but until now, moving them in and out of S3 has been tedious and manual. Integrating S3 into sbommv builds on its modular and extensible architecture, adding S3 as both an input and output system‚Äîjust like we did earlier with folders. This unlocks seamless SBOM movement from S3 to destination platforms or from other systems into S3, with full automation.\nAutomating SBOM movement between S3 and your security tools reduces manual work, speeds up security reviews, and ensures you‚Äôre always audit-ready.\nUse-Cases:\nExport SBOMs from CI pipelines to an S3 bucket, then automatically transfer them to Dependency-Track. Transfer all your SBOMs from folder, github, etc to S3 bucket. Or fetch all SBOMs from S3 bucket and transfer to destination system like SBOM platforms such as Dependency-Track, Interlynk, etc. We have done with theory part, now let\u0026rsquo;s proceed with hands-on part:\n1Ô∏è‚É£ Uploading SBOMs to S3 (Output Adapter) Let\u0026rsquo;s say you already have SBOMs either in a folder, GitHub, or any other input system. Now, you want to push them to an S3 bucket.\nMake sure your AWS credentials are already configured locally and present at ~/aws/credential path.\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --in-github-method=release \\ --output-adapter=s3 \\ --out-s3-bucket-name=\u0026#34;demo-sbom-bucket\u0026#34; \\ --out-s3-prefix=\u0026#34;releases\u0026#34; Or, if you want to provide the AWS_ACCESS_KEY and AWS_SECRET_ KEY on the go, then follow below command:\nexport AWS_ACCESS_KEY=\u0026#34;dkke,kekffkee\u0026#34; export AWS_SECRET_KEY=\u0026#34;efewk.dkdclklvkrle\u0026#34; sbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --in-github-method=release \\ --output-adapter=s3 \\ --out-s3-bucket-name=\u0026#34;demo-sbom-bucket\u0026#34; \\ --out-s3-prefix=\u0026#34;release\u0026#34; \\--out-s3-region=\u0026#34;us-east-1\u0026#34; \\ --out-s3-access-key=$AWS_ACCESS_KEY \\ --out-s3-secret-key=$AWS_SECRET_KEY It will fetch all SBOMs from github release page of sbomqs repository for latest releases, and move them to demo-sbom-bucket S3 bucket under the prefix release. To check run the command:\n$ aws s3 ls s3://demo-sbom-bucket/releases/ 2025-04-26 22:09:11 65430 sbomqs-darwin-amd64.spdx.sbom 2025-04-26 22:09:12 65430 sbomqs-darwin-arm64.spdx.sbom 2025-04-26 22:09:10 65300 sbomqs-linux-amd64.spdx.sbom 2025-04-26 22:09:11 65300 sbomqs-linux-arm64.spdx.sbom 2025-04-26 22:09:13 67651 sbomqs-windows-amd64.exe.spdx.sbom 2025-04-26 22:09:09 67651 sbomqs-windows-arm64.exe.spdx.sbom Now, you have SBOMs on S3 bucket, let\u0026rsquo;s fetch from here and upload to SBOM platforms, like dependency track.\n2Ô∏è‚É£ Fetching SBOMs from S3 (Input Adapter) Let\u0026rsquo;s fetch SBOMs stored in S3 and upload them into Dependency-Track or any other system?\nLet\u0026rsquo;s see what it fetched and what it would upload to Dependency Track:\nsbommv transfer \\ --input-adapter=s3 \\ --in-s3-bucket-name=\u0026#34;vivek-test-sbom\u0026#34; \\ --in-s3-prefix=\u0026#34;releases\u0026#34; \\ --in-s3-region=\u0026#34;us-east-1\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --dry-run -----------------üåê INPUT ADAPTER DRY-RUN OUTPUT üåê----------------- üì¶ Details of all Fetched SBOMs by S3 Input Adapter - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-darwin-amd64.spdx.sbom - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-darwin-arm64.spdx.sbom - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-linux-amd64.spdx.sbom - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-linux-arm64.spdx.sbom - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-windows-amd64.exe.spdx.sbom - üìÅ Bucket: vivek-test-sbom | Prefix: releases | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-windows-arm64.exe.spdx.sbom üì¶ Total SBOMs fetched: 6 -----------------üåê OUTPUT ADAPTER DRY-RUN OUTPUT üåê----------------- üì¶ Dependency-Track Output Adapter Dry-Run üì¶ DTrack API Endpoint: http://localhost:8081 - üìÅ Would upload to project \u0026#39;sbomqs-darwin-amd64-sha256:ca20055b1d9e111a2ae4e3ddc6390cc936ddc9d5b9d36b5aa7a401c8b935d386\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-darwin-amd64.spdx.sbom - üìÅ Would upload to project \u0026#39;sbomqs-darwin-arm64-sha256:f20d3c22cc85c461bbd9932dc15002bc866657067925754c56b546c40661638a\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-darwin-arm64.spdx.sbom - üìÅ Would upload to project \u0026#39;sbomqs-linux-amd64-sha256:eb0c8fd900d49e0522d23536d8df02d500b76b1a01a904585501c62f8e367957\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-linux-amd64.spdx.sbom - üìÅ Would upload to project \u0026#39;sbomqs-linux-arm64-sha256:a0bb511212005a7b6d100e4f5ac683f355ad55e39eaffd5ea878b5be4f5a82fc\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-linux-arm64.spdx.sbom - üìÅ Would upload to project \u0026#39;sbomqs-windows-amd64.exe-sha256:ce2be934bde9fe8525a9b71dd9d866c5cec593de97f76bf08ab0489aa0d1eb3a\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-windows-amd64.exe.spdx.sbom - üìÅ Would upload to project \u0026#39;sbomqs-windows-arm64.exe-sha256:d6543ab68cc069402b44d9601dda6ebd8eedba0179fe3a0b0ed9136415237167\u0026#39; | Format: CycloneDX-JSON | SpecVersion: 1.5 | Filename: sbomqs-windows-arm64.exe.spdx.sbom üìä Total SBOMs to upload: 6 ‚úÖ Dry-run completed. No data was uploaded to DTrack. To setup Dependency-Track locally follow this guide.\nNow, let\u0026rsquo;s execute the actual command to transfer SBOM from S3 to Dependency-Track:\nsbommv transfer \\ --input-adapter=s3 \\ --in-s3-bucket-name=\u0026#34;vivek-test-sbom\u0026#34; \\ --in-s3-prefix=\u0026#34;releases\u0026#34; \\ --in-s3-region=\u0026#34;us-east-1\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; What\u0026rsquo;s happening:\nFetch SBOMs from \u0026ldquo;demo-sbom-bucket/releases/\u0026rdquo;. Auto-validate them. Convert them from SPDX \u0026ndash;\u0026gt; CycloneDX. Upload to Dependency-Track with the right project names, i.e their primary component name with their version. Add Tags(S3 and sbommv)uploads with helpful metadata. If you are storing your SBOMs at some different locations and want that sbommv to support that too, then raise an issue for the same, we will help you out integrating that.\nWhat\u0026rsquo;s Next:\nRun sbommv in daemon mode to watch github released SBOMs References \u0026amp; Resources sbommv GitHub Repository AWS S3 Documentation Dependency-Track Documentation SPDX Specification CycloneDX Specification ","permalink":"http://localhost:1313/posts/modular-sbom-automation-now-with-aws-s3-support/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-9.png\"\u003e\u003c/p\u003e\n\u003cp\u003eIn our previous posts, we streamlined SBOM workflows by moving them from GitHub releases or local folders directly into platforms like Dependency-Track and then, we took it one step further with folder continuous monitoring‚Äîcontinuous fetching and uploading via sbommv‚Äôs daemon mode, which runs in the background and keeps an eye on target folders for any incoming or modified SBOMs.\u003c/p\u003e\n\u003cp\u003eAs we know, sbommv is a modular system that seamlessly integrates multiple input systems like folders, GitHub, and multiple output systems like Dependency-Track, Interlynk, and folders‚Äîallowing SBOMs to move effortlessly from one system to another. Building on that foundation, it\u0026rsquo;s time for another leap forward: \u003cstrong\u003eIntegrating AWS S3 with sbommv\u003c/strong\u003e.\u003c/p\u003e","title":"Modular Sbom Automation: Now With Aws S3 Support"},{"content":"\nHey there üëã SBOM practitioners, compliance engineers, and open-source watchers!\nIf you\u0026rsquo;ve been working with SBOMs lately‚Äîwhether you\u0026rsquo;re producing them or consuming them‚Äîyou‚Äôve probably noticed how quickly they‚Äôve gone from ‚Äúnice to have‚Äù to absolutely essential. I hope now your getting comfortable on working with SBOMs and familiar with software supply chain security terminologies.\nWe all are well-known about the wake-up call on SBOMs,\nFirst one was SolarWinds attack(and later on log4j attack) and US Executive Order 14028 by Biden Govt. And since then, the communities started stepping into this complex world wired with complex software( in form of dependencies) to secure software supply chain security from software supply chain attacks. Next step towards it taken by big organization like OpenSSF and countries by showing up their interest towards it, which resulted into various SBOM guidelines, SBOM related tools, SBOM compliances, SBOM platforms, SCA tools, etc were born.\nSince 2021, If we look at present, it‚Äôs not just the U.S. leading the charge. From Germany‚Äôs BSI to the EU‚Äôs CRA, to sector-specific initiatives like OpenChain and FSCT, SBOM compliance frameworks are showing up everywhere‚Äîeach with its own take on what ‚Äúgood‚Äù looks like.\nAs more of these frameworks take shape, one thing becomes clear:\nIt‚Äôs no longer enough to just generate an SBOM‚Äîyou have to make sure it meets compliance expectations.\nThis is where things get real.\nSBOM Compliance: It‚Äôs Getting Real üîç One thing is clear in the coming future,\ncompliance is no longer optional‚Äîit‚Äôs the baseline.\nRecently Europiun Union can confirmed to make CRA implemented from year 2026. Indian government SEBI organization demanding to filfil their compliances.\nLet\u0026rsquo;s take a look at the compliance framework worldwide by countries:\nüá∫üá∏ NTIA Minimum Elements Defined by the U.S. Department of Commerce post-Executive Order 14028, this framework outlines the minimum fields every SBOM should include‚Äîauthor, timestamp, supplier, license info, dependency graph, and more.\nüá©üá™ BSI TR-03183-2 Germany‚Äôs Federal Office for Information Security (BSI) released one of the most detailed and technical SBOM frameworks to date. It‚Äôs not just about structure‚Äîit digs into data completeness, consistency, and traceability. And it‚Äôs already in version 2.0.\nüåê FSCT (Framing Software Component Transparency) This initiative brings a more global, vendor-neutral view of what ‚Äútransparency‚Äù looks like in SBOMs. It‚Äôs about policy and visibility‚Äîespecially relevant for procurement and risk teams.\nüì∂ OpenChain Telco Born from the telecom sector, this profile maps software transparency back to licensing and open-source usage‚Äîcore concerns for high-availability infrastructure.\nüá™üá∫ Cyber Resilience Act (CRA) Still evolving, but already clear in direction: the CRA expects vendors to produce, maintain, and distribute SBOMs as part of software lifecycle accountability. This isn\u0026rsquo;t advisory‚Äîit\u0026rsquo;s regulatory.\nValidating SBOMs Against Real-World Compliance ‚úÖ So now that we know what these compliance frameworks demand, the next step is figuring out:\n‚ÄúDoes my SBOM meet these specific requirements?‚Äù\nThat‚Äôs where sbomqs comes into play.\nIt was built exactly for this moment‚Äîwhen having an SBOM isn‚Äôt enough, and you need a way to test it against actual compliance rules.\nEnter sbomqs compliance The sbomqs compliance command allows you to check that any SBOM against these SBOMs global compliance standards with a single command‚Äî which gives you the clear, structured report of what‚Äôs: ‚úÖ present and what‚Äôs ‚ùå missing by scoring each field out of 10.\nWhat\u0026rsquo;s exactly problem solved by sbomqs compliance command:\nNo more guesswork. No more opening SBOMs in a text editor. No more wondering if it‚Äôs ‚Äúgood enough.\u0026quot; Let\u0026rsquo;s have a hands-on:\n# Check BSI compliance in table view $ sbomqs compliance --bsi samples/sbomqs-spdx-syft.json # Evaluate NTIA compliance with JSON output sbomqs compliance --ntia --json samples/sbomqs-spdx-syft.json # Run FSCT compliance in table view sbomqs compliance --fsct samples/sbomqs-spdx-syft.json The compliance commands takes a SBOMs and matches against each field present in the compliance framework, i.e NTIA, etc. If it is present, it score as 10, else 0 score.\nWith just one command, you get a compliance scorecard tailored to the framework you‚Äôre working with.\nBut that‚Äôs when a user hit us with a critical insight:\n‚ÄúOkay, great‚ÄîI know my SBOM fails the license check\u0026hellip;But which components are the problem?And how do I find them without digging through raw JSON?‚Äù\nAnd that‚Äôs where things got interesting.\nReal-World Problem: \u0026ldquo;How Do I See Which Components Are Missing What?\u0026rdquo; ü§î Running a compliance check gives you the what ‚Äî\n\u0026hellip;but what about the where ?\nThat question came from a user who was validating their SBOM against the BSI TR-03183-2 framework. Everything looked great ‚Äî until it didin\u0026rsquo;t.\nTheir SBOM failed the comp_valid_licenses,\nAnd their reaction?\n‚ÄúOkay‚Ä¶ it‚Äôs failing. But why?Which components are missing license info?How many are valid? How many aren‚Äôt? I can‚Äôt just fix this blind‚ÄîI need to know what to fix.‚Äù\nAnd just like that, it became clear:\n‚úÖ Scoring is helpful.\nüö´ But it‚Äôs not enough.\nTo actually improve your SBOM, you need visibility. You need the ability to break it down field by field, component by component, and see where things fall short. Which field is missing, how many of components missing the field and who are they ?\nThat‚Äôs exactly why we built the next major feature in sbomqs:\nIntroducing sbomqs list ‚Äì Feature-Level Auditing for SBOMs and it\u0026rsquo;s components üîç So how do you go from knowing your SBOM failed‚Ä¶ to knowing why it failed?\nThat\u0026rsquo;s exactly what the \u0026ldquo;sbomqs list\u0026rdquo; command is designed to solve.\nBorn directly from real-world user feedback, sbomqs list gives you a way to query your SBOM‚Äîon the basis of the feature. Currently we support one feature at a time.\nFor a particular feature, it doesn‚Äôt just tell you if something‚Äôs missing‚Äîit shows you which components have it, which don‚Äôt.\nLet‚Äôs take a look:\nNeed to see which components have valid licenses?\n$ sbomqs list --feature=comp_valid_licenses samples/sbomqs-spdx-syft.json The above command will show all the components that contains valid licenses in a SBOM file sbomqs-spdx-syft.json.\nWant to find the ones that don‚Äôt? $ sbomqs list --feature=comp_valid_licenses --missing samples/sbomqs-spdx-syft.json The above command will show all the components that doesn\u0026rsquo;t contains valid licenses in a SBOM file sbomqs-spdx-syft.json.\nNOTE:\nIf your use-case is see multiple features and multiple SBOMs files, something like as shown below. It\u0026rsquo;s a future work, if you curious one about it, you can raise an issue or comment it. This would help to prioterize it.\n# how many components include both license info and a supplier feature $ sbomqs list --feature=\u0026#34;comp_with_supplier,comp_with_licenses\u0026#34; samples/sbomqs-spdx-syft.json # show both license info and a supplier feature for multiple SBOMs? $ sbomqs list --feature=\u0026#34;comp_with_supplier,comp_valid_licenses\u0026#34; samples/*.json Supported Feature Categories Currently we support following fields or say features: Component-Level Features\ncomp_with_name comp_with_version comp_with_supplier comp_valid_licenses comp_with_primary_purpose comp_with_restrictive_licenses comp_with_checksums comp_with_licenses comp_with_uniq_ids comp_with_any_vuln_lookup_id comp_with_deprecated_licenses comp_with_multi_vuln_lookup_id SBOM-Level Features:\nsbom_creation_timestamp sbom_authors sbom_with_creator_and_version sbom_with_primary_component sbom_dependencies sbom_sharable sbom_parsable sbom_spec sbom_spec_file_format sbom_spec_version You can customize your output using flags like:\n--missing ‚Üí show what‚Äôs not there --json ‚Üí get JSON format results --basic ‚Üí shows only numbers in one line. --detailed ‚Üí detailed information in table view Putting It All Together üîÑ No more guessing. No more scrolling through raw JSON. Just focused, fast, field-level visibility.\n‚úÖ Run a compliance check against NTIA, BSI, FSCT, or OpenChain using sbomqs compliance üö´ Identify which requirements fail‚Äîlicense info, supplier fields, unique IDs, etc. üîç Use sbomqs list to drill down into which components are missing those fields or feature. üõ†Ô∏è According the suggestion, you can further Update or regenerate your SBOM with clean, compliant data to meet the compliace standards. This closes the loop between scoring and improving‚Äîsomething most tools don‚Äôt offer.\nAnd that‚Äôs exactly what sbomqs is built to meet‚Äîhead-on.\nWith sbomqs compliance + sbomqs list, you can:\n‚úîÔ∏è Score against real-world standards üîç Inspect every component and field ‚ö° Fix what matters‚Äîfast, and at scale üöÄ Try it out: üîó sbomqs GitHub Repository üìÑ Compliance Reference Have feedback? Feature ideas? Real-world pain points? üëâ Open an issue, we‚Äôre building this with the community, for the community.\nBecause here‚Äôs the thing:\nSecurity doesn‚Äôt scale without visibility. Start using sbomqs list today‚Äîand give your SBOMs the inspection they deserve.\n","permalink":"http://localhost:1313/posts/whats-missing-in-your-sbom-sbomqs-list-can-help-you-in-inspecting.../","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-8.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey there üëã SBOM practitioners, compliance engineers, and open-source watchers!\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;ve been working with SBOMs lately‚Äîwhether you\u0026rsquo;re producing them or consuming them‚Äîyou‚Äôve probably noticed how quickly they‚Äôve gone from ‚Äúnice to have‚Äù to absolutely essential. I hope now your getting comfortable on working with SBOMs and familiar with software supply chain security terminologies.\u003c/p\u003e\n\u003cp\u003eWe all are well-known about the wake-up call on SBOMs,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst one was SolarWinds attack(and later on log4j attack) and\u003c/li\u003e\n\u003cli\u003eUS Executive Order 14028 by Biden Govt.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd since then, the communities started stepping into this complex world wired with complex software( in form of dependencies) to secure software supply chain security from software supply chain attacks. Next step towards it taken by big organization like OpenSSF and countries by showing up their interest towards it, which resulted into various SBOM guidelines, SBOM related tools, SBOM compliances, SBOM platforms, SCA tools, etc were born.\u003c/p\u003e","title":"What‚Äôs Missing in Your Sbom? Sbomqs List Can Help You in Inspecting..."},{"content":"\nIntroduction In our previous post(GitHub Releases are where SBOM\u0026rsquo;s goto die), we tackled a growing pain in modern software security: SBOMs stuck in GitHub Releases. We showed how sbommv streamlines the manual mess‚Äîautomating the movement of SBOMs from GitHub or local folders directly into SBOM platforms like Dependency-Track, Interlynk(next blog will show demo on this).\nWe covered:\nüîÑ Pulling SBOMs straight from GitHub via API or releases üß≥ Uploading pre-existing SBOMs from local folders üîç Using dry-run mode to validate before uploading And transferring those fetched SBOMs to dependency-track platform smoothly and seamlessly. That was the start. But it still required you to trigger the command each time, especially when input adapter or input system(source of SBOMs) is folder.\nNow we‚Äôre taking it a step further, SBOM automation that doesn‚Äôt wait for you when SBOMs are present in the folders.\nIntroducing: Folder Monitoring üìÅ‚ö° Imagine a workflow where you don‚Äôt even have to run a command when source of SBOM is a folder(i.e input system/adapter is folder). SBOMs just shown up in a folder‚Äîmaybe from your CI pipeline, a nightly build job, or a dev tool‚Äîand sbommv running in the daemon mode, instantly detects it, validates it, convert it to CycloneDX spec and ships them off to SBOM platforms.\nIn theory, SBOM automation should ‚Äújust work.‚Äù But in reality, users are still asking this:\n‚ÄúIs there a tool that can automate SBOM uploads to Dependency-Track outside of CI?‚Äù\n‚ÄúWe generate SBOMs for different modules in CI, but once deployed on a customer site‚Äîwhere there‚Äôs no internet‚Äîwe need a way to update their local Dependency-Track install automatically when new SBOMs show up.‚Äù\nThat‚Äôs not a one-off question‚Äîit‚Äôs a pattern. Products deployed on-premise, CI pipelines that export SBOMs, Air-gapped environments, and teams stuck manually syncing SBOMs post-deployment.\nNow, you don‚Äôt have to, if SBOM source is folder.\nNOTE: This automatically fetching or triggering SBOMs, in technically sbommv running in the background, i.e daemon mode is only for folder input adapter.\nMeet Folder Monitoring With sbommv\u0026rsquo;s new folder monitoring mode, all you have to do is drop the SBOM in a watched folder‚Äî\n‚úñÔ∏è no scripts, ‚úñÔ∏è no re-runs, ‚úñÔ∏è no manual uploads. sbommv running in the background i.e. in daemon mode automatically detects it, validates it, and ships it off to your local Dependency-Track, Interlynk, or other SBOM platforms.\nIt‚Äôs like turning your file system into an event-driven pipeline:\nYour CI drops a new SBOM ‚Üí üìÇ Folder event triggered sbommv running in daemon mode auto-detects ‚Üí ‚úÖ Validates Convert the SPDX spec into CycloneDX spec, especially for Dependency-Track system Automatically uploaded ‚Üí üîÅ Project updated in Dependency-Track No human in the loop. No risk of missing uploads.\nHere‚Äôs what a real-world setup looks like. Let\u0026rsquo;s switch on to some hands-on work.\n1Ô∏è‚É£ Monitoring a Local Folder (Flat Structure) Let‚Äôs start with the simplest case: watch a single-level folder named demo, and upload any SBOM that shows up there.\n$ mkdir demo $ sbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ -d Once started, sbommv enters daemon mode‚Äîactively listening for events in demo directory.\nNow, let\u0026rsquo;s drop an SBOM in demo (or use sbommv to fetch one and drop it to folder):\n# fetch SBOM from input adapter github and save it to output adapter folder $ sbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --output-adapter=folder \\ --out-folder-path=demo 2025-04-08T21:45:06.651+0530\tINFO\tlogger/log.go:102\twrote\t{\u0026#34;path\u0026#34;: \u0026#34;demo/3c62fca7-28d9-4b68-903f-e471b2e4619c.sbom.json\u0026#34;} 2025-04-08T21:45:06.651+0530\tINFO\tlogger/log.go:102\twrote\t{\u0026#34;sboms\u0026#34;: 1, \u0026#34;success\u0026#34;: 1, \u0026#34;failed\u0026#34;: 0} Immediately, the following happens: detects SBOM and uploaded it to dependency track\nLet\u0026rsquo;s check dependency-track platform, whether SBOM is uploaded or not? Yeah, it\u0026rsquo;s uploaded\u0026hellip;\nLet\u0026rsquo;s understand what happens:\nRan sboomv in daemon mode, monitoring folder Drop a SBOM with the help of sboomv from fetching it from github to demo folder üìÇ Event triggered: CREATE \u0026amp; WRITE ‚Üí demo/.json ‚úÖ Detected as SBOM üöÄ Uploaded to Dependency-Track 2Ô∏è‚É£ Deep Monitoring: Sub-directories Included Need to monitor sub-folders too? Add one flag \u0026ndash;in-folder-recursive=true\n$ mkdir -p demo/again $ sbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --in-folder-recursive=true \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ -d Now, let\u0026rsquo;s drop an SBOM in demo (or use sbommv to fetch one and drop it to folder):\n$ sbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --output-adapter=folder \\ --out-folder-path=demo/again Immediately, the following logs appeared: detects SBOM and skip uploading to dependency track. This is because same SBOM is trying to get uploaded in same project. Will talk about this in next section.\nEach nested directory is auto-watched. Each SBOM is independently tracked and uploaded as it\u0026rsquo;s added.\nLet\u0026rsquo;s understand what happens:\nRan sboomv in daemon mode, monitoring folder Drop a SBOM with the help of sboomv from fetching it from github to demo/again folder üìÇ Event triggered: CREATE \u0026amp; WRITE ‚Üí demo/.json ‚úÖ Detected as SBOM üöÄ Skipped uploading to Dependency-Track The SBOM overwrite is controllable via sbommv overwrite flag. Let\u0026rsquo;s see in next section.\n3Ô∏è‚É£ Controlling Overwrites By default, sbommv does not upload a new SBOM if a project with the same name and version already exists in Dependency-Track. This avoids unnecessary updates.\nBut here‚Äôs the twist:\nDependency-Track itself always overwrites SBOMs when they‚Äôre uploaded‚Äîeven if they\u0026rsquo;re identical.\nTo give you more control, sbommv introduces the --overwrite flag:\nDefault Behavior (\u0026ndash;overwrite=false): Uploads are skipped if the SBOM‚Äôs primary component name + version matches one already uploaded. This avoids duplicate uploads. Overwrite Option (\u0026ndash;overwrite=true): Forces upload every time‚Äîeven if the SBOM already exists. Useful for rebuilds or when updating SBOM content while keeping the same component name/version. This flag is handled entirely by sbommv, works with any adapter, and ensures you stay in control of what gets updated.\n$ sbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --overwrite \\ -d Try out it again, and you will see that this time it\u0026rsquo;s uploaded instead of being skipped.\n4Ô∏è‚É£ Preview Everything with Dry-Run üß™ Not ready to go live yet? You can simulate it all with \u0026ndash;dry-run:\n$ sbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --in-folder-recursive=true \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ -d \\ --dry-run This outputs:\nüëÅÔ∏è SBOMs detected in preview mode üìù For Input adapter preview mode it shows: Format, spec version, and file names üì¶ And for Output adapter preview mode shows: Project names \u0026amp; versions that would be created üìä Total count It‚Äôs just to see what\u0026rsquo;s there in the input adapter and what\u0026rsquo;s going to be uploaded in a preview mode, before executing command in actual.\nLet‚Äôs recap what happens under the hood when a new SBOM shows up in the watched folder:\nüìÇ Event Triggered ‚Äì CREATE + WRITE üïµÔ∏è File Validated ‚Äì Only valid SBOMs are picked up üîÑ Format Upgraded ‚Äì E.g., SPDX 2.2 ‚Üí SPDX 2.3 ‚Üí CycloneDX üì§ Project Created/Updated in DTrack ‚úÖ Upload Complete ‚Äì You‚Äôre done You‚Äôll see clean logs showing every step‚Äîwhat was detected, what was uploaded, what was skipped, and what was ignored.\nWhy This Matters SBOMs are no longer one-time artifacts. They evolve with every commit, build, patch and new version.\nReal-time folder monitoring brings SBOM automation closer to how modern dev and DevSecOps teams actually work.\nIt:\n‚úîÔ∏è Keeps security platforms updated in sync with software changes ‚úîÔ∏è Removes the lag between SBOM generation and analysis ‚úîÔ∏è Enables hands-off, always-on SBOM pipelines No more missed uploads. No more backlogs.\nWhat‚Äôs Next? Now that folder monitoring is live, we‚Äôre already looking ahead:\nInterlynk Platform demo: blog on using Interlynk as a destination system covering both sbommv use-cases. ‚òÅÔ∏è S3 Bucket Integration: as input as well as output system for source as well as destination. ‚òÅÔ∏è S3 Bucket Monitoring ‚Äì Watch S3 for incoming SBOMs and upload automatically We‚Äôre just getting warmed up.\nStay tuned for hands-on guides with Interlynk Platform + folder monitoring workflows. Want early access?\n‚≠ê Star the repo: https://github.com/interlynk-io/sbommv and drop us a message for your use s like integration your SBOM source systems or SBOM platform system, will love to integrate them.\n","permalink":"http://localhost:1313/posts/folder-monitoring-sbom-automation-that-never-sleeps/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-7.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn our previous post(GitHub Releases are where SBOM\u0026rsquo;s goto die), we tackled a growing pain in modern software security: SBOMs stuck in GitHub Releases. We showed how sbommv streamlines the manual mess‚Äîautomating the movement of SBOMs from GitHub or local folders directly into SBOM platforms like Dependency-Track, Interlynk(next blog will show demo on this).\u003c/p\u003e\n\u003cp\u003eWe covered:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eüîÑ Pulling SBOMs straight from GitHub via API or releases\u003c/li\u003e\n\u003cli\u003eüß≥ Uploading pre-existing SBOMs from local folders\u003c/li\u003e\n\u003cli\u003eüîç Using dry-run mode to validate before uploading\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd transferring those fetched SBOMs to dependency-track platform smoothly and seamlessly. That was the start. But it still required you to trigger the command each time, especially when input adapter or input system(source of SBOMs) is folder.\u003c/p\u003e","title":"Folder Monitoring: Sbom Automation That Never Sleeps"},{"content":"\nHey there üëã, SBOM enthusiasts ! Since the 2021 Cyber security Executive Order by Joe Biden. SBOMs (Software Bill of Materials) have become essential for software security and compliance. With countries like the EU, US, Germany, and India introducing their own SBOM regulations, it‚Äôs clear:\nSBOMs aren‚Äôt optional anymore‚Äîthey\u0026rsquo;re the new standard.\nTo meet this demand, tools for SBOM generation, signing, quality analysis, enrichment, and integration into security platforms have rapidly evolved, largely driven by the open-source community.\nThe SBOM Transfer Challenge Once generated, an SBOM typically needs to be manually downloaded, uploaded, and integrated into security tools, requiring human intervention at multiple steps.\nThis approach is:\n‚ùå Time-consuming ‚Äì Repeatedly downloading and uploading SBOMs consumes valuable time. ‚ùå Error-prone ‚Äì Manual handling increases the chance of error. ‚ùå Outdated ‚Äì In an era of automation, relying on manual workflows simply doesn‚Äôt scale. Manual way has become an old fashion in the world of Automation.\nThis inefficiency is a major bottleneck for security teams and slows down software supply chain risk management.\nSeamless SBOMs transfer using sbommv At Interlynk, we designed sbommv to enable seamless SBOM transfers across systems. Its modular architecture supports input and output adapters, along with translation and enrichment, ensuring flexibility and adaptability. This design makes sbommv highly extensible, allowing easy integration with additional systems in the future.\nEliminates manual work ‚Äì No more downloading, uploading, or tedious file handling. Effortless and Seamless integration ‚Äì Seamlessly moves SBOMs across platforms with minimal setup. Scalable \u0026amp; future-ready ‚Äì Adapts to evolving security and compliance needs. üöÄ With sbommv, SBOMs flow from source to destination with zero manual effort ‚Äî eliminating human intervention and aligning perfectly with the modern automation-first approach.\nReal-World Scenario Many software projects publish SBOMs on GitHub, alongside binaries, archives, executables, and signatures. The SBOMs artifacts are also termed as digital artifacts.\nOnce an SBOM is generated, it needs to be transferred to SBOM management platforms like Dependency-Track, Interlynk and other security tools for deeper analysis, vulnerability assessments, and compliance tracking. However, this process is often manual and inefficient. Security teams or engineers typically have to locate, download, and upload SBOMs manually adding unnecessary overhead and increasing the risk of errors.\nThis outdated workflow involves:\n1Ô∏è‚É£ Manually searching for SBOMs in GitHub releases or other repositories. 2Ô∏è‚É£ Downloading and re-uploading them to SBOM management platforms for processing. 3Ô∏è‚É£ Repeating this process for every software release, across multiple repositories‚Äîleading to wasted time and potential inconsistencies.\nThis manual workflow is widespread across open-source projects, enterprises, and regulated industries, where software security and compliance are critical. As software development accelerates and release cycles shorten, the frequency of SBOM generation grows. Relying on manual SBOM transfers is no longer practical ‚Äî organizations need a scalable, automated approach to keep up.\nTo address this challenge, let‚Äôs explore a hands-on guide for efficiently transferring SBOMs across systems via sbommv\u0026hellip;\nsbommv in action üöÄ Installation brew tap interlynk-io/interlynk brew install sbommv For any other installation methods, you can follow this guide.\nHands-on with sbommv Before transferring SBOMs from Github to Dependency-Track, ensure you have installed and running. For detailed Dependency-Track installation steps, refer to the [Appendix](Appendix: Setting Up Dependency-Track) at the buttom section.\nWe are done with setting up prerequisites for sbommv. Let‚Äôs unleash the power of sbommv‚Ä¶\n1. Automated SBOM transfer from GitHub to Dependency-Track This is the simplest and most automated way to manage SBOMs with minimal user effort. It leverages GitHub\u0026rsquo;s API to automatically pulls the SBOM for the latest main branch, as GitHub allows to export SBOM for an repository.\nNOTE: Enable SBOM export through the Dependency Graph API\nRun the following command to fetch the SBOM from the sbommv repository and move it to Dependency-Track:\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbommv\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; After execution:\nThe SBOM is fetched \u0026ndash;\u0026gt; converted to CycloneDX \u0026ndash;\u0026gt; uploaded to Dependency-Track. If the project doesn‚Äôt exist, it is auto-created in Dependency-Track. Above it is created with a name interlynk-io/sbommv-latest. Along with project creation it adds description and tags. Above the description is added as - \u0026ldquo;Created \u0026amp; uploaded by sbommv\u0026rdquo; and tags as \u0026ldquo;github\u0026rdquo; and \u0026ldquo;sbommv\u0026rdquo;. Pros \u0026amp; Cons of Using GitHub API Method for SBOM Transfer As GitHub allows SBOMs to be exported manually or via its Dependency Graph API making it a convenient source of SBOM.\n‚úÖ Pros ‚úîÔ∏è Fully Automated ‚Äì Eliminates the need to manually generate and transfer SBOMs. ‚úîÔ∏è Keeps Projects Up-to-Date ‚Äì Automatically syncs with Dependency-Track, ensuring that the latest SBOM is always available. ‚úîÔ∏è Fastest way to get started, without using any tools for SBOM generation.\n‚ùå Cons ‚ö†Ô∏è Limited to Main Branch ‚Äì GitHub‚Äôs API only provides SBOMs for the default branch, meaning it lacks visibility into past versions or specific releases. ‚ö†Ô∏è No Historical Snapshots ‚Äì It does not capture SBOMs for previous versions of the software, which may be critical for compliance or security audits.\nAlternative GitHub Methods for More Advanced SBOM Workflows For teams needing greater control over SBOM extraction, sbommv supports additional GitHub methods beyond the API approach:\nRelease-Based Method ‚Äì Fetches all SBOMs from GitHub releases, ensuring version history is captured. Tool-Based Method ‚Äì Clones the repository and generates fresh SBOMs using tools like Syft, providing a more comprehensive software bill of materials. These options allow for deeper insights, better version tracking, and more complete SBOM management beyond what GitHub‚Äôs API alone can offer.\n2. Uploading pre-existing SBOMs from a folder to Dependency-Track In cases where SBOMs are already stored locally, sbommv can seamlessly transfer them from a Folder to Dependency-Track\nTo demonstrate this, let‚Äôs populate a local folder with SBOMs. We\u0026rsquo;ll download all SBOMs from the sbomqs GitHub repository via GitHub release method, ensuring we fetch the latest available version.\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbomqs\u0026#34; \\ --in-github-method=\u0026#34;release\u0026#34; \\ --output-adapter=folder \\ --out-folder-path=\u0026#34;demo\u0026#34; Now that we have a collection of SBOMs in our local folder demo, the next step is to seamlessly transfer them to Dependency-Track using sbommv.\nRun the following command to upload all SBOMs from the local demo folder to Dependency-Track:\nsbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; After execution:\nOnly valid SBOM files are detected and uploaded. SPDX 2.2 SBOMs are automatically upgraded to SPDX 2.3 before being converted to CycloneDX, maintaining compatibility with Dependency-Track acceptability. Automatically creates the project name using the primary component name and version from the SBOM. 3. Dry-Run Mode (Optional Feature) Before executing an SBOM transfer, sbommv provides a dry-run mode, allowing users to preview which SBOMs will be processed‚Äîwithout making any actual changes. This feature helps verify transfers for both GitHub-based and folder-based SBOM sources.\nPreviewing a Github-to-Dependency-Track Transfer To check which SBOMs will be transferred from a GitHub repository to Dependency-Track, run:\nsbommv transfer \\ --input-adapter=github \\ --in-github-url=\u0026#34;https://github.com/interlynk-io/sbommv\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --dry-run Displays the list of SBOMs that would be fetched from which all repo and their formats. Ensures project names and formats are correctly identified before execution. Total number of SBOMs fetched. Previewing a Folder-to-Dependency-Track Transfer To verify SBOMs stored in a local folder before transferring them to Dependency-Track, run:\nsbommv transfer \\ --input-adapter=folder \\ --in-folder-path=\u0026#34;demo\u0026#34; \\ --output-adapter=dtrack \\ --out-dtrack-url=\u0026#34;http://localhost:8081\u0026#34; \\ --dry-run Lists valid SBOM files detected in the folder. Confirms format, project name with it will be uploaded to DTrack, Spec-Version and filename. Total SBOMs to be uploaded. Dry-run mode helps prevent errors and validate transfers before execution, making it a useful feature for ensuring smooth SBOM management.\nSo, far we have cover two key industry scenarios:\n1Ô∏è‚É£ Automated SBOM generation and transfer ‚Äì Fetching SBOMs directly from GitHub and seamlessly integrating them into Dependency-Track. 2Ô∏è‚É£ Uploading pre-existing SBOMs ‚Äì Transferring locally stored SBOMs from a folder to Dependency-Track while ensuring format compatibility and project organization. These workflows demonstrate how sbommv streamlines SBOM movement, reducing manual effort and ensuring SBOMs are always available for security and compliance analysis.\nFuture Work: What‚Äôs Next for sbommv? Folder Monitoring ‚Äì Instead of manually triggering SBOM transfers, sbommv will continuously monitor directories and automatically upload new SBOMs as they appear. Stay tuned‚Äîthis feature is launching next week üöÄ with hands-on with Interlynk platform ! Expanded Input \u0026amp; Output Support ‚Äì We\u0026rsquo;re adding support for S3 buckets, additional security tools, and more SBOM formats, making sbommv even more versatile. Advanced SBOM Processing ‚Äì Enhancements are on the way, including better SBOM format conversions, improved validation, and detailed logging for greater visibility into SBOM transfers. If you find sbommv useful, show your support by giving the repository a ‚≠ê on GitHub. Your feedback and contributions help drive its future development!\nGot a feature request? Open an issue on our GitHub repo ‚Äî we‚Äôd love to hear your ideas! üöÄ\nWrapping up Manually transferring SBOMs is no longer a viable approach, especially as software supply chain security and compliance requirements continue to evolve. Inefficient workflows not only waste time but also introduce risks that can compromise security. Automation is the only scalable solution.\nWith sbommv, SBOM movement is seamless‚Äîwhether pulling directly from GitHub or transferring pre-existing SBOMs from local folders to Dependency-Track. By eliminating manual handling, organizations can ensure that SBOMs are always up to date, integrated into security tools, and readily available for analysis.\nThe shift towards automated SBOM management isn‚Äôt just a convenience‚Äîit‚Äôs a necessity.\n\u0026ldquo;Start using sbommv today and bring automation to your SBOM lifecycle\n‚Äî because security doesn‚Äôt scale manually.\u0026rdquo;\nReferences \u0026amp; Resources üîπ sbommv GitHub Repository ‚Äì GitHub üîπ Dependency-Track Documentation ‚Äì DT Docs and Github Link üîπ SPDX \u0026amp; CycloneDX Specification ‚Äì SPDX doc | CycloneDX doc üîπ Interlynk Official Website ‚Äì Website üîπ Interlynk OSS Projects ‚Äì Github üîπsbommv getting started guide and examples\nAppendix: Setting Up Dependency-Track Run a Dependency-Track locally on your system using docker $ docker pull dependencytrack/bundled $ docker volume create --name dependency-track $ docker run -d -m 8192m -p 8080:8080 --name dependency-track -v dependency-track:/data dependencytrack/bundled Visit http://localhost:8080 Log in with the default credentials: Now change your password. Finally you landed into homepage of Dependency-Track platform. Let\u0026rsquo;s create DTRACK_API_KEY token, which is required to access the platform. On the left hand side, go to Adminstration \u0026ndash;\u0026gt; Access Management \u0026ndash;\u0026gt; Teams \u0026ndash;\u0026gt; click on Adminsitrator \u0026ndash;\u0026gt; copy the below API keys, something like this: Now, export this token in your CLI, before running sbommv. export DTRACK_API_KEY=\u0026#34;odt_WYMdgLZ8sQNEVAfTwD7C5tV55ysQI1Ps\u0026#34; ","permalink":"http://localhost:1313/posts/github-releases-are-where-sboms-goto-die/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/image-30.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHey there üëã, SBOM enthusiasts ! Since the \u003ca href=\"https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity\"\u003e2021 Cyber security Executive Order\u003c/a\u003e by Joe Biden. SBOMs (Software Bill of Materials) have become essential for software security and compliance. With countries like the \u003ca href=\"https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act\"\u003eEU\u003c/a\u003e, \u003ca href=\"https://www.ntia.gov/sites/default/files/publications/sbom_minimum_elements_report_0.pdf\"\u003eUS\u003c/a\u003e, \u003ca href=\"https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/TechGuidelines/TR03183/BSI-TR-03183-2-2_0_0.pdf?__blob=publicationFile\u0026amp;v=3\"\u003eGermany\u003c/a\u003e, and \u003ca href=\"https://www.cert-in.org.in/PDF/SBOM_Guidelines.pdf\"\u003eIndia\u003c/a\u003e introducing their own SBOM regulations, it‚Äôs clear:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSBOMs aren‚Äôt optional anymore‚Äîthey\u0026rsquo;re the new standard.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eTo meet this demand, tools for SBOM generation, signing, quality analysis, enrichment, and integration into security platforms have rapidly evolved, largely driven by the open-source community.\u003c/p\u003e","title":"Github Releases Are Where Sboms Goto Die"},{"content":"Introduction In today\u0026rsquo;s interconnected software ecosystem, applications are rarely built from scratch. Modern software is assembled from hundreds or even thousands of components - open source libraries, proprietary modules, and third-party services. This complexity creates a critical challenge: how do we know what\u0026rsquo;s actually inside our software?\nEnter the Software Bill of Materials (SBOM) - a comprehensive inventory that provides transparency into software components and their relationships.\nWhat is an SBOM? A Software Bill of Materials (SBOM) is a formal, machine-readable inventory of all components, libraries, and modules that make up a software application. Think of it as a detailed ingredient list for software - just as food products list their ingredients and nutritional information, an SBOM lists all the software components and their dependencies.\nKey Elements of an SBOM An SBOM typically includes:\nComponent Names: Identification of all software components Version Information: Specific versions of each component Supplier/Author Details: Who created or maintains each component Dependencies: Relationships between components License Information: Licensing terms for each component Hash Values: Cryptographic identifiers for integrity verification Timestamp: When the SBOM was created Why is SBOM Required? 1. Security Vulnerability Management The most compelling reason for SBOM adoption is security. When vulnerabilities like Log4Shell emerge, organizations need to quickly determine if they\u0026rsquo;re affected. Without an SBOM, this process can take weeks or months. With an SBOM, it\u0026rsquo;s a matter of minutes.\nReal-world Impact: The Log4j vulnerability (CVE-2021-44228) affected millions of applications worldwide. Organizations with SBOMs could immediately identify affected systems, while others spent weeks manually auditing their software.\n2. Regulatory Compliance Governments and regulatory bodies increasingly require SBOMs:\nExecutive Order 14028 (USA): Mandates SBOMs for software sold to the federal government EU Cyber Resilience Act: Requires security documentation including component transparency FDA Requirements: Medical device software must include comprehensive component documentation 3. License Compliance Open source components come with various licenses - GPL, MIT, Apache, and others. Each has different obligations. SBOMs help organizations:\nTrack license obligations across all components Avoid legal risks from license violations Ensure compliance with open source policies 4. Supply Chain Risk Management Software supply chain attacks increased by 650% in 2021. SBOMs provide:\nVisibility: Know exactly what\u0026rsquo;s in your software Traceability: Track the origin of each component Risk Assessment: Identify components from high-risk sources Incident Response: Quickly respond to compromised components 5. Operational Benefits Beyond security and compliance, SBOMs offer practical advantages:\nFaster Onboarding: New team members quickly understand system composition Efficient Updates: Identify which components need updating Better Planning: Make informed decisions about component selection Cost Optimization: Identify duplicate or unnecessary components Common SBOM Formats Two primary standards dominate the SBOM landscape:\nSPDX (Software Package Data Exchange) Developed by the Linux Foundation ISO/IEC 5962:2021 international standard Comprehensive format covering licensing, security, and provenance CycloneDX Created by OWASP Designed for security use cases Native support for vulnerability tracking Who Needs SBOMs? Software Producers Responsibility: Generate and maintain accurate SBOMs Benefit: Demonstrate security maturity and compliance Software Consumers Responsibility: Request and analyze SBOMs from vendors Benefit: Understand and manage software risks DevOps Teams Responsibility: Integrate SBOM generation into CI/CD pipelines Benefit: Automate vulnerability scanning and compliance checks Getting Started with SBOMs Choose a Format: Select SPDX or CycloneDX based on your needs Select Tools: Implement SBOM generation tools in your build process Establish Processes: Create workflows for SBOM creation, storage, and sharing Train Your Team: Ensure everyone understands SBOM importance and usage Start Small: Begin with critical applications and expand gradually Challenges and Considerations While SBOMs are valuable, organizations face challenges:\nCompleteness: Ensuring all components are captured Accuracy: Maintaining up-to-date information Depth: Deciding how deep to go with transitive dependencies Storage: Managing and versioning SBOMs effectively Sharing: Balancing transparency with security concerns The Future of SBOMs SBOMs are evolving from nice-to-have to must-have. Future developments include:\nAutomation: AI-powered SBOM generation and analysis Standardization: Greater interoperability between formats Integration: Native SBOM support in development tools Real-time Updates: Dynamic SBOMs that update automatically Enhanced Intelligence: SBOMs enriched with threat intelligence Conclusion Software Bill of Materials represents a fundamental shift in how we approach software transparency and security. As software becomes increasingly complex and interconnected, SBOMs provide the visibility needed to manage risks, ensure compliance, and maintain secure systems.\nThe question is no longer whether you need an SBOM, but how quickly you can implement them across your software portfolio. The organizations that embrace SBOMs today will be better positioned to handle the security challenges of tomorrow.\nNext Steps Ready to implement SBOMs in your organization? Stay tuned for our upcoming posts on:\nHow to Generate Your First SBOM SBOM Tools Comparison Guide Best Practices for SBOM Management Integrating SBOMs into Your DevSecOps Pipeline Have questions about SBOMs? Join the discussion in our community forums or reach out to our contributors.\n","permalink":"http://localhost:1313/posts/what-is-sbom-why-required/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn today\u0026rsquo;s interconnected software ecosystem, applications are rarely built from scratch. Modern software is assembled from hundreds or even thousands of components - open source libraries, proprietary modules, and third-party services. This complexity creates a critical challenge: how do we know what\u0026rsquo;s actually inside our software?\u003c/p\u003e\n\u003cp\u003eEnter the Software Bill of Materials (SBOM) - a comprehensive inventory that provides transparency into software components and their relationships.\u003c/p\u003e\n\u003ch2 id=\"what-is-an-sbom\"\u003eWhat is an SBOM?\u003c/h2\u003e\n\u003cp\u003eA \u003cstrong\u003eSoftware Bill of Materials (SBOM)\u003c/strong\u003e is a formal, machine-readable inventory of all components, libraries, and modules that make up a software application. Think of it as a detailed ingredient list for software - just as food products list their ingredients and nutritional information, an SBOM lists all the software components and their dependencies.\u003c/p\u003e","title":"What is an SBOM and Why is it Required?"},{"content":"Our Mission SBOM Insights is a community-driven platform dedicated to sharing knowledge, best practices, and insights about Software Bill of Materials (SBOM). We believe in the importance of software transparency and supply chain security in today\u0026rsquo;s interconnected digital ecosystem.\nWhat We Cover SBOM Standards CycloneDX: The OWASP Foundation and Ecma International Technical Committee for Software \u0026amp; System Transparency (TC54) drive the continued advancement of the specification. SPDX: An open standard capable of representing systems with software components in as SBOMs (Software Bill of Materials) and other AI, data and security references supporting a range of risk management use cases. OSS Utilies OSS utitilies which help with SBOM management e.g(sbomasm, sbomqs, syft, sbom-tool, dependency-track, ..) Topics of Interest SBOM generation and tooling Supply chain security Vulnerability management License compliance Best practices for SBOM adoption Regulatory requirements and compliance Real-world implementation case studies Our Contributors We welcome contributions from:\nInternal Team: Security engineers, developers, and compliance experts from our organization External Contributors: Industry experts, researchers, and practitioners passionate about SBOM Contributing Interested in contributing? Check out our Contributors Guide to learn how you can share your knowledge with the community.\nContact Us Have questions or suggestions? Reach out to us through:\nGitHub: github.com/interlynk-io LinkedIn: linkedin.com/company/interlynk Twitter: @interlynk Legal All content is provided for educational purposes. Please ensure you comply with your organization\u0026rsquo;s policies when implementing SBOM practices.\n","permalink":"http://localhost:1313/about/","summary":"\u003ch2 id=\"our-mission\"\u003eOur Mission\u003c/h2\u003e\n\u003cp\u003eSBOM Insights is a community-driven platform dedicated to sharing knowledge, best practices, and insights about Software Bill of Materials (SBOM). We believe in the importance of software transparency and supply chain security in today\u0026rsquo;s interconnected digital ecosystem.\u003c/p\u003e\n\u003ch2 id=\"what-we-cover\"\u003eWhat We Cover\u003c/h2\u003e\n\u003ch3 id=\"sbom-standards\"\u003eSBOM Standards\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCycloneDX\u003c/strong\u003e: The OWASP Foundation and Ecma International Technical Committee for Software \u0026amp; System Transparency (TC54) drive the continued advancement of the specification.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSPDX\u003c/strong\u003e: An open standard capable of representing systems with software components in as SBOMs (Software Bill of Materials) and other AI, data and security references supporting a range of risk management use cases.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"oss-utilies\"\u003eOSS Utilies\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eOSS utitilies which help with SBOM management e.g(sbomasm, sbomqs, syft, sbom-tool, dependency-track, ..)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"topics-of-interest\"\u003eTopics of Interest\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSBOM generation and tooling\u003c/li\u003e\n\u003cli\u003eSupply chain security\u003c/li\u003e\n\u003cli\u003eVulnerability management\u003c/li\u003e\n\u003cli\u003eLicense compliance\u003c/li\u003e\n\u003cli\u003eBest practices for SBOM adoption\u003c/li\u003e\n\u003cli\u003eRegulatory requirements and compliance\u003c/li\u003e\n\u003cli\u003eReal-world implementation case studies\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"our-contributors\"\u003eOur Contributors\u003c/h2\u003e\n\u003cp\u003eWe welcome contributions from:\u003c/p\u003e","title":"About SBOM Insights"},{"content":"Welcome Contributors! SBOM Insights thrives on community contributions. Whether you\u0026rsquo;re from our internal team or an external expert, we welcome your insights, experiences, and knowledge about Software Bill of Materials.\nWho Can Contribute? Internal Contributors Security engineers Software developers DevOps/DevSecOps practitioners Compliance and legal teams Product managers working with SBOM External Contributors Industry experts and consultants Researchers and academics Open source maintainers SBOM tool developers Anyone with SBOM implementation experience Types of Contributions Blog Posts Technical tutorials and how-tos Case studies and implementation stories Tool reviews and comparisons Best practices and lessons learned Industry news and analysis Other Contributions Code examples and scripts SBOM samples and templates Corrections and improvements to existing content Translations (coming soon) How to Contribute Step 1: Fork and Clone # Fork the repository on GitHub first, then: git clone https://github.com/YOUR-USERNAME/sbom-blog.git cd sbom-blog Step 2: Create Your Branch git checkout -b post/your-post-title Step 3: Add Your Content Create a new post in content/posts/:\nhugo new posts/my-sbom-article.md Step 4: Post Format Use this template for your post:\n--- title: \u0026#34;Your Article Title\u0026#34; date: 2024-01-30 draft: false author: \u0026#34;your-name\u0026#34; authors: [\u0026#34;your-name\u0026#34;] tags: [\u0026#34;relevant\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;here\u0026#34;] categories: [\u0026#34;Category\u0026#34;] summary: \u0026#34;A brief description of your article (50-100 words)\u0026#34; --- ## Introduction Your content here... ## Main Sections Break your content into logical sections... ## Conclusion Wrap up your key points... Step 5: Add Author Information Create your author profile in data/authors/your-name.yaml:\nname: \u0026#34;Your Name\u0026#34; bio: \u0026#34;Brief bio (2-3 lines)\u0026#34; email: \u0026#34;your.email@example.com\u0026#34; company: \u0026#34;Your Company\u0026#34; github: \u0026#34;yourusername\u0026#34; linkedin: \u0026#34;yourprofile\u0026#34; twitter: \u0026#34;yourhandle\u0026#34; Step 6: Submit Pull Request git add . git commit -m \u0026#34;Add post: Your Article Title\u0026#34; git push origin post/your-post-title Then create a pull request on GitHub.\nContent Guidelines Technical Accuracy Verify all technical information Include version numbers for tools Test all code examples Provide references and sources Writing Style Clear and concise language Use headings and subheadings Include code examples where relevant Add diagrams or screenshots if helpful Topics We\u0026rsquo;re Looking For SBOM generation techniques Integration with CI/CD pipelines Vulnerability management with SBOMs License compliance strategies Real-world implementation challenges Regulatory compliance (EU CRA, US EO) SBOM consumption and analysis Supply chain security best practices Review Process Initial Review: Check for completeness and guidelines compliance Technical Review: Verify technical accuracy Editorial Review: Grammar, style, and formatting Publication: Merge and deploy Expected timeline: 5-10 business days\nCode of Conduct Be Respectful Welcome diverse perspectives Provide constructive feedback Focus on the content, not the person Be Inclusive Use inclusive language Consider global audience Avoid jargon without explanation Be Helpful Share knowledge generously Help other contributors Improve existing content Recognition Contributors are recognized through:\nAuthor attribution on posts Contributors page listing Social media mentions Annual contributor recognition Questions? Open an issue on GitHub Email: support@interlynk.io Join our Discord: [coming soon] Legal By contributing, you agree that:\nYour content is original or properly attributed You have the right to share the content Content is provided under CC BY 4.0 Get Started Ready to contribute? Here are some ideas:\nFirst-time contributor? Start with a tool review or tutorial Experienced with SBOMs? Share a case study or best practices Found an error? Submit a correction Have a question? Open a discussion We look forward to your contributions to the SBOM community!\n","permalink":"http://localhost:1313/contributors/","summary":"\u003ch2 id=\"welcome-contributors\"\u003eWelcome Contributors!\u003c/h2\u003e\n\u003cp\u003eSBOM Insights thrives on community contributions. Whether you\u0026rsquo;re from our internal team or an external expert, we welcome your insights, experiences, and knowledge about Software Bill of Materials.\u003c/p\u003e\n\u003ch2 id=\"who-can-contribute\"\u003eWho Can Contribute?\u003c/h2\u003e\n\u003ch3 id=\"internal-contributors\"\u003eInternal Contributors\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSecurity engineers\u003c/li\u003e\n\u003cli\u003eSoftware developers\u003c/li\u003e\n\u003cli\u003eDevOps/DevSecOps practitioners\u003c/li\u003e\n\u003cli\u003eCompliance and legal teams\u003c/li\u003e\n\u003cli\u003eProduct managers working with SBOM\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"external-contributors\"\u003eExternal Contributors\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIndustry experts and consultants\u003c/li\u003e\n\u003cli\u003eResearchers and academics\u003c/li\u003e\n\u003cli\u003eOpen source maintainers\u003c/li\u003e\n\u003cli\u003eSBOM tool developers\u003c/li\u003e\n\u003cli\u003eAnyone with SBOM implementation experience\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"types-of-contributions\"\u003eTypes of Contributions\u003c/h2\u003e\n\u003ch3 id=\"blog-posts\"\u003eBlog Posts\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTechnical tutorials and how-tos\u003c/li\u003e\n\u003cli\u003eCase studies and implementation stories\u003c/li\u003e\n\u003cli\u003eTool reviews and comparisons\u003c/li\u003e\n\u003cli\u003eBest practices and lessons learned\u003c/li\u003e\n\u003cli\u003eIndustry news and analysis\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"other-contributions\"\u003eOther Contributions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCode examples and scripts\u003c/li\u003e\n\u003cli\u003eSBOM samples and templates\u003c/li\u003e\n\u003cli\u003eCorrections and improvements to existing content\u003c/li\u003e\n\u003cli\u003eTranslations (coming soon)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"how-to-contribute\"\u003eHow to Contribute\u003c/h2\u003e\n\u003ch3 id=\"step-1-fork-and-clone\"\u003eStep 1: Fork and Clone\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Fork the repository on GitHub first, then:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone https://github.com/YOUR-USERNAME/sbom-blog.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e sbom-blog\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-2-create-your-branch\"\u003eStep 2: Create Your Branch\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit checkout -b post/your-post-title\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-3-add-your-content\"\u003eStep 3: Add Your Content\u003c/h3\u003e\n\u003cp\u003eCreate a new post in \u003ccode\u003econtent/posts/\u003c/code\u003e:\u003c/p\u003e","title":"Contributors Guide"}]